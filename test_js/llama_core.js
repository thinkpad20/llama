// Generated by CoffeeScript 1.7.1
(function() {
  var ConstructorNotFoundError, Exception, Just, LlamaObject, LookupError, NoAttributeError, Nothing, PatternMatchError, get_trace, is_instance, print, println, show, _, _append, _divide, _minus, _plus, _throw, _times;

  _ = require('underscore');

  Object.prototype.deref = function(idx) {
    if (idx === 0) {
      return this;
    }
    return _throw(PatternMatchError());
  };

  _throw = function(exc) {
    throw exc;
  };

  LlamaObject = (function() {
    function LlamaObject(___type_name, ___constr_name, ___values, ___attrs, parent, affect) {
      this.___type_name = ___type_name;
      this.___constr_name = ___constr_name;
      this.___values = ___values != null ? ___values : [];
      this.___attrs = ___attrs != null ? ___attrs : {};
      this.parent = parent;
      if (affect != null) {
        affect(this);
      }
    }

    LlamaObject.prototype.deref = function(constr_name, idx) {
      if (this.___constr_name === constr_name) {
        if (idx < this.___values.length) {
          return this.___values[idx];
        } else {
          return _throw(DerefRangeError(idx));
        }
      } else if (this.___parent != null) {
        return this.___parent.deref(constr_name, idx);
      } else {
        return _throw(ConstructorNotFoundError(constr_name));
      }
    };

    LlamaObject.prototype.get_attr = function(constr_name, key) {
      if (this.___constr_name === constr_name) {
        if (this.___attrs[key] != null) {
          return this.___attrs[key];
        } else {
          return _throw(NoAttributeError(key));
        }
      } else if (this.parent != null) {
        return this.parent.get_attr(constr_name, idx);
      } else {
        return _throw(ConstructorNotFoundError(constr_name));
      }
    };

    return LlamaObject;

  })();

  is_instance = function(obj, name) {
    if (_.isArray(obj && name === 'Array')) {
      return true;
    }
    if (_.isNumber(obj && name === 'Num')) {
      return true;
    }
    if (_.isString(obj && name === 'Str')) {
      return true;
    }
    if (_.isBoolean(obj && name === 'Bool')) {
      return true;
    }
    if (obj.___type_name === name) {
      return true;
    }
    return (obj.___parent != null) && is_instance(obj.___parent, name);
  };

  get_trace = function() {
    return new Error().stack.split('\n');
  };

  Exception = function(msg) {
    return new LlamaObject('Exception', 'Exception', [msg], {}, null, function(self) {
      return self.___attrs.trace = get_trace();
    });
  };

  NoAttributeError = function(attr) {
    return function(obj) {
      var parent;
      parent = Exception("Attribute " + (show(attr)) + " not found on object " + (show(obj)));
      return new LlamaObject('NoAttributeError', 'NoAttributeError', [attr], {}, parent);
    };
  };

  ConstructorNotFoundError = function(constrName) {
    var parent;
    parent = Exception("Constructor " + (show(constr_name)) + " not found on object " + (show(obj)));
    return new LlamaObject('NoAttributeError', 'NoAttributeError', [attr], {}, parent);
  };

  LookupError = function(key) {
    var parent;
    parent = Exception(_append(_append('Key ')(show(key)))(' was not found'));
    return new LlamaObject('LookupError', 'LookupError', [key], {}, parent);
  };

  PatternMatchError = function(pat) {
    return function(val) {
      var parent, s;
      s = _append("Couldn't match value ")(show(val));
      s = _append(s)(' with pattern ');
      s = _append(s)(show(pat));
      parent = Exception(s);
      return new LlamaObject('PatternMatchError', 'PatternMatchError', [pat, val], {}, parent);
    };
  };

  Number.prototype.get_attr = function(name) {
    if (this[name] != null) {
      return this[name];
    }
    return _throw(NoAttributeError(name));
  };

  String.prototype.get_attr = function(name) {
    if (this[name] != null) {
      return this[name];
    }
    return _throw(NoAttributeError(name));
  };

  Function.prototype._call = function(arg) {
    if (_.isArray(arg)) {
      return this.apply(null, arg);
    } else {
      return this(arg);
    }
  };

  Nothing = new LlamaObject('Maybe', 'Nothing');

  Just = function(_a) {
    return new LlamaObject('Maybe', 'Just', [_a]);
  };

  _plus = function(x) {
    return function(y) {
      return x + y;
    };
  };

  _minus = function(x) {
    return function(y) {
      return x - y;
    };
  };

  _times = function(x) {
    return function(y) {
      return x * y;
    };
  };

  _divide = function(x) {
    return function(y) {
      return x / y;
    };
  };

  _append = _plus;

  show = function(x) {
    return x;
  };

  println = console.log;

  print = process.stdout.write;

  exports.LlamaObject = LlamaObject;

  exports.is_instance = is_instance;

  exports.Exception = Exception;

  exports.LookupError = LookupError;

  exports.PatternMatchError = PatternMatchError;

  exports.ConstructorNotFoundError = ConstructorNotFoundError;

  exports.NoAttributeError = NoAttributeError;

  exports.Nothing = Nothing;

  exports.Just = Just;

  exports._throw = _throw;

  exports.show = show;

  exports.println = println;

  exports.print = print;

  exports._plus = _plus;

  exports._minus = _minus;

  exports._times = _times;

  exports._divide = _divide;

  exports._append = _plus;

}).call(this);
